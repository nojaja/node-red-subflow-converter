[
    {
        "id": "f01882c08732b397",
        "type": "tab",
        "label": "PROC管理",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dbd8abb392121dc1",
        "type": "tab",
        "label": "JOBCTL_管理用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd185f8f533e0f2d",
        "type": "subflow",
        "name": "logger",
        "info": "サイドバーの「デバッグ」タブに、選択したメッセージプロパティの値を表示します。\r\n設定により、ランタイムログへの出力も可能です。\r\nデフォルトの表示対象は`msg.payload`ですが、設定により、指定したプロパティ、メッセージ全体、もしくは、JSONata式の評価結果を出力できます。\r\n\r\n## 詳細\r\n「デバッグ」サイドバーは受け取ったメッセージの階層構造を表示する機能を備えます。この機能によりメッセージの構造を容易に理解できます。\r\n\r\nJavaScriptオブジェクトと配列は必要に応じて折り畳んだり展開したりできます。バッファオブジェクトを生データとして表示したり、表現可能な場合に文字列として表示したりすることも可能です。\r\n\r\nメッセージを受信した時刻、送信ノード、メッセージの型に関する情報を「デバッグ」サイドバーに表示されたメッセージに付随して表示します。送信元ノードのIDを選択すると、ワークスペース内の対応ノードを確認できます。\r\n\r\n出力の有効/無効はノード上のボタンで切り替えられます。フロー上で未使用のdebugノードは、無効化するか削除することを推奨します。\r\n\r\n全てのメッセージをランタイムログに送付、もしくは、(32文字の)短いデータをdebugノードの下のステータステキストに表示することも可能です。",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "8b05743651ac39ce"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "logLevel",
                "type": "str",
                "value": "info"
            },
            {
                "name": "logName",
                "type": "str",
                "value": "system"
            },
            {
                "name": "logPath",
                "type": "str",
                "value": "/workspace/logs/"
            }
        ],
        "meta": {
            "module": "node-red-job-logger",
            "type": "logger",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#87A980",
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "27227cef106a74f0",
        "type": "subflow",
        "name": "endpoint",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 660,
                "y": 120,
                "wires": [
                    {
                        "id": "2be49eb745fa791d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "endpoint",
                "type": "env",
                "value": "/${actionType}/:topic",
                "ui": {
                    "type": "hide"
                }
            }
        ],
        "meta": {
            "module": "node-red-job-endpoint",
            "type": "endpoint",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "45018afdb676ae24",
        "type": "subflow",
        "name": "rpc-async",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "a9fa9c32d27f7f10"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 320,
                "wires": [
                    {
                        "id": "194d7930b95721c2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "endpoint",
                "type": "env",
                "value": "/callback/${jobgroup}/jobsession/",
                "ui": {
                    "type": "hide"
                }
            },
            {
                "name": "jobsession_key",
                "type": "str",
                "value": "jobsession"
            },
            {
                "name": "endpointport",
                "type": "str",
                "value": "2880"
            },
            {
                "name": "jobgroup",
                "type": "str",
                "value": "test"
            }
        ],
        "meta": {
            "module": "node-red-job-rpc-async",
            "type": "rpc-async",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "0cd70b49340abfe2",
        "type": "subflow",
        "name": "cluster-endpoint",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "20dcaeb9b3ab0ad1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "endpoint_port",
                "type": "str",
                "value": "2880"
            }
        ],
        "meta": {
            "module": "node-red-job-cluster-endpoint",
            "type": "cluster-endpoint",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "610d7761aec803a7",
        "type": "subflow",
        "name": "cluster-ctl",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "055a6b1f611eebc9"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "COMMAND",
                "type": "str",
                "value": ""
            },
            {
                "name": "BROADCAST",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {
            "module": "node-red-job-cluster-ctl",
            "type": "cluster-ctl",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "b3da594ab22fa515",
        "type": "subflow",
        "name": "switch-role",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "2ca89985ea3eb86d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 370,
                "y": 40,
                "wires": [
                    {
                        "id": "2ca89985ea3eb86d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 120,
                "wires": [
                    {
                        "id": "2ca89985ea3eb86d",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-switch-role",
            "type": "switch-role",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "outputLabels": [
            "jobctl",
            "processor"
        ],
        "icon": "node-red/switch.svg"
    },
    {
        "id": "375ee1d6cf6e3891",
        "type": "subflow",
        "name": "rpc-sync",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "a72d2803344a446d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 40,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 100,
                "wires": [
                    {
                        "id": "ab5c9b3893934684",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "actionType",
                "type": "str",
                "value": "exec"
            },
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            }
        ],
        "meta": {
            "module": "node-red-job-rpc-sync",
            "type": "rpc-sync",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "c826488602403262",
        "type": "subflow",
        "name": "topics-assign",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "18819cbac00ebaf8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            },
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            }
        ],
        "meta": {
            "module": "node-red-job-topics-assign",
            "type": "topics-assign",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "b8cfb4b94405d94d",
        "type": "subflow",
        "name": "fillter-topic",
        "info": "\r\n環境変数TOPICSに設定した値のみを通すフィルタ\r\n\r\n```\r\nenv.set(\"TOPICS\", \"topic1,topic2\")\r\n```\r\n\r\ntopicPath: チェックするtopicが格納されている場所\r\n\r\ntopicPath: \"msg.payload.topic\"\r\nmsg = {\r\n    payload: {topic: \"topic1\"}\r\n}\r\n\r\n# result\r\nconsole.log(map.topic) // topic1\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9824a4787a5aa8d6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 60,
                "wires": [
                    {
                        "id": "9824a4787a5aa8d6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 120,
                "wires": [
                    {
                        "id": "9824a4787a5aa8d6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "payload.PAYLOAD.topic"
            }
        ],
        "meta": {
            "module": "node-red-job-fillter-topic",
            "type": "fillter-topic",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "icon": "node-red/rbe.png"
    },
    {
        "id": "d6f01b04a12d7282",
        "type": "subflow",
        "name": "topic-add",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "a27285317db43ec7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "a27285317db43ec7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "payload.topic"
            }
        ],
        "meta": {
            "module": "node-red-job-topic-add",
            "type": "topic-add",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "0eb6c089a1f171e9",
        "type": "subflow",
        "name": "topics-list",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "126cbf276ed23332"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "126cbf276ed23332",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            }
        ],
        "meta": {
            "module": "node-red-job-topics-list",
            "type": "topics-list",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "f5ba2b0f4e9255e0",
        "type": "subflow",
        "name": "topics-update",
        "info": "",
        "category": "Topic Control",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "df88c0ce3abe7f11"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 40,
                "wires": [
                    {
                        "id": "df88c0ce3abe7f11",
                        "port": 0
                    }
                ]
            },
            {
                "x": 380,
                "y": 100,
                "wires": [
                    {
                        "id": "df88c0ce3abe7f11",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicPath",
                "type": "str",
                "value": "topic"
            },
            {
                "name": "statusPath",
                "type": "str",
                "value": "status"
            },
            {
                "name": "uuidPath",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "node-red-job-topics-update",
            "type": "topics-update",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "1f63a3ba2a6337e6",
        "type": "subflow",
        "name": "waitlist-add",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "998fa97d665f6910"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "998fa97d665f6910",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topicNamePath",
                "type": "str",
                "value": "payload.PAYLOAD.topic"
            }
        ],
        "meta": {
            "module": "node-red-job-waitlist-add",
            "type": "waitlist-add",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "f1b787faf67b8960",
        "type": "subflow",
        "name": "waitlist-assign",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "2e548032e1145bc9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "2e548032e1145bc9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 120,
                "wires": [
                    {
                        "id": "2e548032e1145bc9",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-waitlist-assign",
            "type": "waitlist-assign",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DEB887",
        "icon": "node-red/db.svg"
    },
    {
        "id": "b1626fc28a971f31",
        "type": "subflow",
        "name": "split-array",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "210c38446e598771"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "210c38446e598771",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "inputArrayPath",
                "type": "str",
                "value": "payload.list"
            },
            {
                "name": "outputPath",
                "type": "str",
                "value": "payload.topic"
            }
        ],
        "meta": {
            "module": "node-red-job-split-array",
            "type": "split-array",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E2D96E",
        "icon": "node-red/split.svg"
    },
    {
        "id": "7157de4597b60201",
        "type": "subflow",
        "name": "flow-limit",
        "info": "",
        "category": "Rate Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b19fa56a77429a44"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 40,
                "wires": [
                    {
                        "id": "b19fa56a77429a44",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 100,
                "wires": [
                    {
                        "id": "b19fa56a77429a44",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-flow-limit",
            "type": "flow-limit",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/trigger.svg"
    },
    {
        "id": "f6c57fcec804269c",
        "type": "subflow",
        "name": "flow-start",
        "info": "",
        "category": "Rate Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e0410ad4c1884406"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 60,
                "wires": [
                    {
                        "id": "e0410ad4c1884406",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 100,
                "wires": [
                    {
                        "id": "e0410ad4c1884406",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-flow-start",
            "type": "flow-start",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/inject.svg"
    },
    {
        "id": "e9700f935181888e",
        "type": "subflow",
        "name": "flow-end",
        "info": "",
        "category": "Rate Control",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f2b282801e277ec6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "f2b282801e277ec6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 340,
                "y": 120,
                "wires": [
                    {
                        "id": "f2b282801e277ec6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-flow-end",
            "type": "flow-end",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#E6E0F8",
        "icon": "node-red/link-out.svg"
    },
    {
        "id": "131075747e8871f8",
        "type": "subflow",
        "name": "proc-start",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "006e9d528f47ee98"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 60,
                "wires": [
                    {
                        "id": "bd61d5cefb666280",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1040,
                "y": 180,
                "wires": [
                    {
                        "id": "006e9d528f47ee98",
                        "port": 1
                    },
                    {
                        "id": "f98af433e5369734",
                        "port": 1
                    },
                    {
                        "id": "ca70b65374e24ae8",
                        "port": 1
                    },
                    {
                        "id": "bd61d5cefb666280",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-proc-start",
            "type": "proc-start",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "1ec11fe81fee736c",
        "type": "subflow",
        "name": "proc-end",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "82c3b0b299dbe8a3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 60,
                "wires": [
                    {
                        "id": "707bc717a0d8c626",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 140,
                "wires": [
                    {
                        "id": "707bc717a0d8c626",
                        "port": 1
                    },
                    {
                        "id": "de4e7c1a54204bc7",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-job-proc-end",
            "type": "proc-end",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6399b4d8775a079a",
        "type": "subflow",
        "name": "jobctl",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {
            "module": "node-red-job-jobctl",
            "type": "jobctl",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-flash"
    },
    {
        "id": "4d4915ce082a1010",
        "type": "subflow",
        "name": "procctl",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {
            "module": "node-red-job-procctl",
            "type": "procctl",
            "version": "0.0.1",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "8b05743651ac39ce",
        "type": "function",
        "z": "cd185f8f533e0f2d",
        "name": "logger_proc",
        "func": "//const uid_key = env.get(\"logUID_Key\")\n//const uid = msg[uid_key] || msg._msgid\nconst date = new Date()\nconst uid = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate() + 1)).slice(-2)\n\nconst logLevel = env.get(\"logLevel\")\nconst logName = env.get(\"logName\")\nconst logPath = env.get(\"logPath\")\nconst filename = `${logName}${logLevel}.log`\nmsg.logFilePath = path.join(logPath, uid, filename)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "5dfac259ecc0927f",
                "7e0a41b86051ec87"
            ]
        ]
    },
    {
        "id": "5dfac259ecc0927f",
        "type": "file",
        "z": "cd185f8f533e0f2d",
        "name": "logout",
        "filename": "logFilePath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 410,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7e0a41b86051ec87",
        "type": "debug",
        "z": "cd185f8f533e0f2d",
        "name": "${logName}",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 100,
        "wires": []
    },
    {
        "id": "ab279f5f2fd77d53",
        "type": "http in",
        "z": "27227cef106a74f0",
        "name": "endpoint",
        "url": "${endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "87bd2ef55c481975"
            ]
        ]
    },
    {
        "id": "87bd2ef55c481975",
        "type": "change",
        "z": "27227cef106a74f0",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "callbackhost",
                "pt": "msg",
                "to": "req.params.x-callback",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 60,
        "wires": [
            [
                "2be49eb745fa791d"
            ]
        ]
    },
    {
        "id": "d4ed8772713b75e0",
        "type": "template",
        "z": "27227cef106a74f0",
        "name": "Response-Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "HOSTNAME: {{env.HOSTNAME}}\nNODE_RED_VERSION:{{env.NODE_RED_VERSION}}\njob-session: {{sobsession}}\ntarget: {{target}}\nCALLBACK HOST: {{callbackhost}}",
        "output": "str",
        "x": 720,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b2cb43138961ea29",
        "type": "http response",
        "z": "27227cef106a74f0",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "285f8f2fa8f0b214",
        "type": "function",
        "z": "27227cef106a74f0",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic,\n    \"callbackhost\": msg.callbackhost\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            [
                "b2cb43138961ea29"
            ]
        ]
    },
    {
        "id": "2be49eb745fa791d",
        "type": "function",
        "z": "27227cef106a74f0",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "285f8f2fa8f0b214"
            ]
        ]
    },
    {
        "id": "fe5cdfa3977befd1",
        "type": "http in",
        "z": "45018afdb676ae24",
        "name": "endpoint",
        "url": "${endpoint}",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "194d7930b95721c2"
            ]
        ]
    },
    {
        "id": "194d7930b95721c2",
        "type": "change",
        "z": "45018afdb676ae24",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "jobsession",
                "pt": "msg",
                "to": "req.params.jobsession",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "req.params.target",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "callbackhost",
                "pt": "msg",
                "to": "req.params.x-callback",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 220,
        "wires": [
            [
                "28a1734171d6b9cb"
            ]
        ]
    },
    {
        "id": "28a1734171d6b9cb",
        "type": "template",
        "z": "45018afdb676ae24",
        "name": "Response-Page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "HOSTNAME: {{env.HOSTNAME}}\nNODE_RED_VERSION:{{env.NODE_RED_VERSION}}\njob-session: {{sobsession}}\ntarget: {{target}}\nCALLBACK HOST: {{callbackhost}}",
        "output": "str",
        "x": 620,
        "y": 220,
        "wires": [
            [
                "410889c1e32a785c"
            ]
        ]
    },
    {
        "id": "410889c1e32a785c",
        "type": "http response",
        "z": "45018afdb676ae24",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "a9fa9c32d27f7f10",
        "type": "function",
        "z": "45018afdb676ae24",
        "name": "generate_url",
        "func": "\nconst port = env.get(\"PORT\")\nconst endpointport = env.get(\"endpointport\")\n\nconst service = env.get(\"service_name\")\nconst action = env.get(\"action_type\")\n\nconst jobsession_key = env.get(\"jobsession_key\")\nconst jobsession = msg[jobsession_key]\n\nconst target_key = env.get(\"target_key\")\nconst target = msg[target_key]\n\nmsg.host = env.get(\"SERVICENAME\")\nmsg.service = service\nmsg.joburl = `http://${service}/${action}/${jobsession}/${target}`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "7479f711071af9bc"
            ]
        ]
    },
    {
        "id": "7479f711071af9bc",
        "type": "http request",
        "z": "45018afdb676ae24",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-callback",
                "valueType": "msg",
                "valueValue": "host"
            },
            {
                "keyType": "other",
                "keyValue": "x-jobgroup",
                "valueType": "msg",
                "valueValue": "service"
            }
        ],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "457bf364e0336269"
            ]
        ]
    },
    {
        "id": "457bf364e0336269",
        "type": "subflow:cd185f8f533e0f2d",
        "z": "45018afdb676ae24",
        "name": "",
        "x": 650,
        "y": 100,
        "wires": []
    },
    {
        "id": "870573ecbe68ee62",
        "type": "udp in",
        "z": "0cd70b49340abfe2",
        "name": "",
        "iface": "",
        "port": "${endpoint_port}",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "20dcaeb9b3ab0ad1"
            ]
        ]
    },
    {
        "id": "20dcaeb9b3ab0ad1",
        "type": "function",
        "z": "0cd70b49340abfe2",
        "name": "payload decode",
        "func": "msg.payload = JSON.parse(msg.payload)\nif (!msg.payload.CLUSTER_SERVICE_IP) msg.payload.CLUSTER_SERVICE_IP = msg.ip\n\nconst CLUSTER_GROUP = env.get(\"CLUSTER_GROUP\")\n\n//同じグループじゃない場合は処理しない\nif (msg.payload.CLUSTER_GROUP != CLUSTER_GROUP) return null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7d45f678d4340e2f",
        "type": "udp out",
        "z": "610d7761aec803a7",
        "name": "send",
        "addr": "",
        "iface": "",
        "port": "2880",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "broad",
        "x": 970,
        "y": 100,
        "wires": []
    },
    {
        "id": "22cfd8a746e0d355",
        "type": "function",
        "z": "610d7761aec803a7",
        "name": "set broadcastAddress",
        "func": "msg.ip = msg.LocalAddress.broadcastAddress\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 80,
        "wires": [
            [
                "7d45f678d4340e2f"
            ]
        ]
    },
    {
        "id": "ce61c2fe2072c316",
        "type": "function",
        "z": "610d7761aec803a7",
        "name": "set ip",
        "func": "//console.log(msg)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "ip",
                "module": "ip"
            }
        ],
        "x": 690,
        "y": 120,
        "wires": [
            [
                "7d45f678d4340e2f"
            ]
        ]
    },
    {
        "id": "1c270b85f20694db",
        "type": "function",
        "z": "610d7761aec803a7",
        "name": "SEND COMMAND",
        "func": "const CLUSTER_SERVICE_HTTP_PORT = env.get(\"PORT\") || \"1880\"\nconst CLUSTER_SERVICE_UDP_PORT = env.get(\"UDPPORT\") || \"2880\"\n\nconst CLUSTER_GROUP = env.get(\"CLUSTER_GROUP\")\nconst CLUSTER_ROLE = env.get(\"CLUSTER_ROLE\")\n//const CLUSTER_SERVICE_HOST = env.get(\"KUBERNETES_SERVICE_HOST\")\nconst CLUSTER_SERVICE_IP = msg.LocalAddress.address\nconst CLUSTER_SERVICE_HOST = env.get(\"HOSTNAME\") || CLUSTER_SERVICE_IP\nconst NODE_RED_VERSION = env.get(\"NODE_RED_VERSION\")\nconst COMMAND = env.get(\"COMMAND\")\n\nmsg.payload = JSON.stringify({\n    \"COMMAND\": COMMAND,\n    \"CLUSTER_GROUP\": CLUSTER_GROUP,\n    \"CLUSTER_ROLE\": CLUSTER_ROLE,\n    \"CLUSTER_SERVICE_HOST\": CLUSTER_SERVICE_HOST,\n    \"CLUSTER_SERVICE_IP\": CLUSTER_SERVICE_IP,\n    \"CLUSTER_SERVICE_HTTP_PORT\": CLUSTER_SERVICE_HTTP_PORT,\n    \"CLUSTER_SERVICE_UDP_PORT\": CLUSTER_SERVICE_UDP_PORT,\n    \"NODE_RED_VERSION\": NODE_RED_VERSION,\n    \"PAYLOAD\": msg.payload\n})\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "e304dc51216491e8"
            ]
        ]
    },
    {
        "id": "e304dc51216491e8",
        "type": "switch",
        "z": "610d7761aec803a7",
        "name": "isBROADCAST",
        "property": "BROADCAST",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 80,
        "wires": [
            [
                "22cfd8a746e0d355"
            ],
            [
                "ce61c2fe2072c316"
            ]
        ]
    },
    {
        "id": "055a6b1f611eebc9",
        "type": "function",
        "z": "610d7761aec803a7",
        "name": "getLocalAddress",
        "func": "\n\n//ipv4: [ { name: 'eth0', address:\nmsg.LocalAddress = RED.util.getLocalAddress().ipv4[0]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 40,
        "wires": [
            [
                "1c270b85f20694db"
            ]
        ]
    },
    {
        "id": "2ca89985ea3eb86d",
        "type": "function",
        "z": "b3da594ab22fa515",
        "name": "switch role",
        "func": "const CLUSTER_ROLE = env.get(\"CLUSTER_ROLE\")\n//jobctl\nif (CLUSTER_ROLE === \"jobctl\") {\n    return [msg, null]\n} else {\n//processor\n    return [null, msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 170,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a72d2803344a446d",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "generate_url",
        "func": "\nconst JOBCTL_HOST = global.get(\"JOBCTL_HOST\")\nconst JOBCTL_SERVICE_IP = JOBCTL_HOST.IP\nconst JOBCTL_SERVICE_HOST_HTTP_PORT = JOBCTL_HOST.HTTP_PORT\nconst actionType = env.get(\"actionType\")\n\nconst topicPath = env.get(\"topicPath\")\nconst topic = encodeURIComponent(JSON.stringify(RED.util.getPropByPath(msg, topicPath)))\n\nmsg.joburl = `http://${JOBCTL_SERVICE_IP}:${JOBCTL_SERVICE_HOST_HTTP_PORT}/${actionType}/${topic}`\nmsg.topic = topic\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "fc01a190e21bcf85"
            ]
        ]
    },
    {
        "id": "fc01a190e21bcf85",
        "type": "http request",
        "z": "375ee1d6cf6e3891",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{joburl}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "x-topic",
                "valueType": "msg",
                "valueValue": "topic"
            }
        ],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "ab5c9b3893934684"
            ]
        ]
    },
    {
        "id": "ab5c9b3893934684",
        "type": "function",
        "z": "375ee1d6cf6e3891",
        "name": "JSON.parse",
        "func": "if (msg.statusCode == \"200\") {\n    if (msg.payload) {\n        try {\n            msg.payload = JSON.parse(msg.payload)\n        } catch (error) {\n        }\n    }\n    return [msg, null]\n}else{\n\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "18819cbac00ebaf8",
        "type": "function",
        "z": "c826488602403262",
        "name": "topics_assign",
        "func": "\nconst topicPath = env.get(\"topicPath\") //ex.msg.status\nconst selectTopic = RED.util.getPropByPath(msg, topicPath)\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst statusFlow = {\n    \"new\": \"assigned\",\n    \"assigned\": \"in-progress\",\n    \"in-progress\": \"completed\"\n}\nconst nextStatus = statusFlow[selectStatus]\nconst topics = global.get(\"TOPICS\") || new Map()//{topicname:[{name:\"\",status: \"new\"}]}\nconst topicStatus = topics.get(selectTopic) || new Map()\nconst topic_new = topicStatus.get(selectStatus) || new Map()\nconst topic_proc = topicStatus.get(nextStatus) || new Map()\n\nconst topicTicket = RED.util.mappop(topic_new)\nif (!topicTicket) return [null, msg]\ntopicTicket.status = nextStatus\ntopic_proc.set(topicTicket.uuid, topicTicket)\n\ntopicStatus.set(selectStatus, topic_new)\ntopicStatus.set(nextStatus, topic_proc)\ntopics.set(selectTopic, topicStatus)\nglobal.set(\"TOPICS\", topics)\nmsg = Object.assign(msg, { payload: { topic: topicTicket.topic, topicTicket: topicTicket } });\n\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9824a4787a5aa8d6",
        "type": "function",
        "z": "b8cfb4b94405d94d",
        "name": "fillter topic",
        "func": "\nconst TARGET_TOPICS = (env.get(\"TOPICS\") || \"topic1,topic2\").split(',')\nconst topicPath = env.get(\"topicPath\") //ex. msg.payload.PAYLOAD.topic\nconst topic = RED.util.getPropByPath(msg, topicPath)\n\nmsg.topic = topic\nif (TARGET_TOPICS.indexOf(topic) > -1) return [msg, null]\nreturn [null, msg]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a27285317db43ec7",
        "type": "function",
        "z": "d6f01b04a12d7282",
        "name": "topic_add",
        "func": "\nconst topicPath = env.get(\"topicPath\") //ex.msg.payload.topic \nconst topicTicket = RED.util.getPropByPath(msg, topicPath)//{topic: \"\",param: { }}\ntopicTicket.uuid = crypto.randomUUID()\n\nif (!topicTicket) return msg\n//{topicname:[{topic:\"\",param: {}}}]}\nconst topicName = topicTicket.topic\nconst topics = global.get(\"TOPICS\") || new Map()\nconst topicStatus = topics.get(topicName) || new Map()\nconst topic = topicStatus.get(\"new\") || new Map()\ntopic.set(topicTicket.uuid,topicTicket)\ntopicStatus.set(\"new\", topic)\ntopics.set(topicName, topicStatus)\nglobal.set(\"TOPICS\", topics)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "126cbf276ed23332",
        "type": "function",
        "z": "0eb6c089a1f171e9",
        "name": "topics_list",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst topics = global.get(\"TOPICS\") || new Map()\nconst topics_list = new Array()\n\nfor (const [topicName, topicStatus] of topics) {\n    const topic_new = topicStatus.get(selectStatus) || new Map()\n    if (topic_new.size > 0) topics_list.push(topicName)\n}\n\nmsg = Object.assign(msg, { payload: { list: topics_list } });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "df88c0ce3abe7f11",
        "type": "function",
        "z": "f5ba2b0f4e9255e0",
        "name": "topics_update",
        "func": "const topicPath = env.get(\"topicPath\") //ex.msg.status\nconst selectTopic = RED.util.getPropByPath(msg, topicPath)\n\nconst statusPath = env.get(\"statusPath\") //ex.msg.status\nconst selectStatus = RED.util.getPropByPath(msg, statusPath) || \"new\"\n\nconst uuidPath = env.get(\"uuidPath\") //ex.msg.status\nconst uuid = RED.util.getPropByPath(msg, uuidPath) || \"uuid\"\n\nconst statusFlow = {\n    \"new\": \"assigned\",\n    \"assigned\": \"in-progress\",\n    \"in-progress\": \"completed\"\n}\nconst nextStatus = statusFlow[selectStatus]\nconst topics = global.get(\"TOPICS\") || new Map()//{topicname:[{name:\"\",status: \"new\"}]}\nconst topicStatus = topics.get(selectTopic) || new Map()\nconst topic_new = topicStatus.get(selectStatus) || new Map()\nconst topic_proc = topicStatus.get(nextStatus) || new Map()\n\nconst topicTicket = topic_new.get(uuid)\nif (!topicTicket) return [null, msg]\nif (!topic_new.delete(uuid)) return [null, msg]\ntopicTicket.status = nextStatus\ntopic_proc.set(topicTicket.uuid, topicTicket)\n\ntopicStatus.set(selectStatus, topic_new) || new Array()\ntopicStatus.set(nextStatus, topic_proc) || new Array()\ntopics.set(selectTopic, topicStatus) || new Map()\nglobal.set(\"TOPICS\", topics) || new Map()\n\nmsg = Object.assign(msg, { payload: { topic: topicTicket.topic, topicTicket: JSON.stringify(topicTicket) } });\n\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "998fa97d665f6910",
        "type": "function",
        "z": "1f63a3ba2a6337e6",
        "name": "waitlist-add",
        "func": "const topicPath = env.get(\"topicNamePath\") //ex.msg.payload.topic \nconst topicName = RED.util.getPropByPath(msg, topicPath)//{topic: \"\",param: { }}\n\n//{topicname:[{topic:\"\",param: {}}}]}\nconst waitlist = global.get(\"WAITLIST_TOPICS\") || new Array()\nwaitlist.push(topicName)\nglobal.set(\"WAITLIST_TOPICS\", waitlist)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2e548032e1145bc9",
        "type": "function",
        "z": "f1b787faf67b8960",
        "name": "waitlist-assign",
        "func": "const waitlist = global.get(\"WAITLIST_TOPICS\") || new Array()//{topicname:[{name:\"\",status: \"new\"}]}\nconst topicName = waitlist.pop()\nif (!topicName) return [null, msg]\nglobal.set(\"WAITLIST_TOPICS\", waitlist)\nmsg = Object.assign(msg, { topic: topicName });\nreturn [msg, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "210c38446e598771",
        "type": "function",
        "z": "b1626fc28a971f31",
        "name": "split-array",
        "func": "\nconst inputArrayPath = env.get(\"inputArrayPath\") //ex.msg.payload.topic \nconst list = RED.util.getPropByPath(msg, inputArrayPath)//{topic: \"\",param: { }}\nconst outputPath = env.get(\"outputPath\") //ex.msg.payload.topic \n\nfor (const key in list) {\n    const retmsg = RED.util.setPropByPath(msg, outputPath, list[key])\n    node.send(retmsg);\n}\n\n//node.done();\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b19fa56a77429a44",
        "type": "function",
        "z": "7157de4597b60201",
        "name": "flow-limit",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\nconst flowstatus = global.get(\"FLOW_STATUS\") || new Map()\nconst max = global.get(\"FLOW_MAX\") || 1\n\nif (flowstatus.size >= max) return [null, msg]\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e0410ad4c1884406",
        "type": "function",
        "z": "f6c57fcec804269c",
        "name": "flow-start",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\nconst flowstatus = global.get(\"FLOW_STATUS\") || new Map()\n\nconst topicTicket = msg.payload.topicTicket\nconst uuid = topicTicket.uuid\nif (flowstatus.has(uuid)) return [null, msg]\nflowstatus.set(uuid, topicTicket)\nglobal.set(\"FLOW_STATUS\", flowstatus)\nmsg.topicTicket = topicTicket\nmsg.topic = topicTicket.topic\nmsg.uuid = uuid\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f2b282801e277ec6",
        "type": "function",
        "z": "e9700f935181888e",
        "name": "flow-end",
        "func": "//{topicname:[{name:\"\",status: \"new\"}]}\nconst flowstatus = global.get(\"FLOW_STATUS\") || new Map()\nconst uuid = msg.uuid\n\nif (!flowstatus.has(uuid)) return [null, msg]\n\nflowstatus.delete(uuid)\nglobal.set(\"FLOW_STATUS\", flowstatus)\nreturn [msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ca70b65374e24ae8",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "131075747e8871f8",
        "name": "topic取得",
        "env": [
            {
                "name": "actionType",
                "value": "assign",
                "type": "str"
            }
        ],
        "x": 740,
        "y": 80,
        "wires": [
            [
                "bd61d5cefb666280"
            ],
            []
        ]
    },
    {
        "id": "60ccecf9024cc129",
        "type": "subflow:b3da594ab22fa515",
        "z": "131075747e8871f8",
        "name": "",
        "x": 370,
        "y": 80,
        "wires": [
            [],
            [
                "f98af433e5369734"
            ]
        ]
    },
    {
        "id": "f98af433e5369734",
        "type": "subflow:f1b787faf67b8960",
        "z": "131075747e8871f8",
        "name": "",
        "x": 560,
        "y": 80,
        "wires": [
            [
                "ca70b65374e24ae8"
            ],
            []
        ]
    },
    {
        "id": "006e9d528f47ee98",
        "type": "subflow:7157de4597b60201",
        "z": "131075747e8871f8",
        "name": "",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "60ccecf9024cc129"
            ],
            []
        ]
    },
    {
        "id": "bd61d5cefb666280",
        "type": "subflow:f6c57fcec804269c",
        "z": "131075747e8871f8",
        "name": "",
        "x": 900,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "707bc717a0d8c626",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "1ec11fe81fee736c",
        "name": "topic 完了",
        "env": [
            {
                "name": "actionType",
                "value": "completed",
                "type": "str"
            },
            {
                "name": "topicPath",
                "value": "topicTicket",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 60,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "82c3b0b299dbe8a3",
        "type": "subflow:b3da594ab22fa515",
        "z": "1ec11fe81fee736c",
        "name": "",
        "x": 190,
        "y": 80,
        "wires": [
            [],
            [
                "de4e7c1a54204bc7"
            ]
        ]
    },
    {
        "id": "de4e7c1a54204bc7",
        "type": "subflow:e9700f935181888e",
        "z": "1ec11fe81fee736c",
        "name": "",
        "x": 400,
        "y": 80,
        "wires": [
            [
                "707bc717a0d8c626"
            ],
            []
        ]
    },
    {
        "id": "e4f436cc7dbe9cfd",
        "type": "inject",
        "z": "6399b4d8775a079a",
        "name": "PINGREQ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "86db81d4646a1b23"
            ]
        ]
    },
    {
        "id": "8436d950506a6455",
        "type": "switch",
        "z": "6399b4d8775a079a",
        "name": "",
        "property": "payload.COMMAND",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CONNECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CONNACK",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PINGREQ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PINGRESP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TOPIC",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "70fa88a3c6d0a19e"
            ],
            [
                "7cccfcec40ecbf10"
            ],
            [
                "ed74f720bc1d1a06"
            ],
            [
                "45a4ad7677cb1357"
            ],
            []
        ]
    },
    {
        "id": "2bbd39fa02b50886",
        "type": "inject",
        "z": "6399b4d8775a079a",
        "name": "CONNECT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "fda60e2d1718673e"
            ]
        ]
    },
    {
        "id": "45a4ad7677cb1357",
        "type": "debug",
        "z": "6399b4d8775a079a",
        "name": "PROC PINGRESP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "7cccfcec40ecbf10",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "PROC CONNACK",
        "func": "\nif (msg.payload.CLUSTER_ROLE !== \"jobctl\") return msg;\nconst JOBCTL_HOST = {\n    HOST: msg.payload.CLUSTER_SERVICE_HOST || msg.payload.CLUSTER_SERVICE_IP,\n    IP: msg.payload.CLUSTER_SERVICE_IP || msg.payload.CLUSTER_SERVICE_HOST,\n    HTTP_PORT: msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\",\n    UDP_PORT: msg.payload.CLUSTER_SERVICE_UDP_PORT || \"2880\",\n\n    NODE_RED_VERSION: msg.payload.NODE_RED_VERSION,\n    ROLE: msg.payload.CLUSTER_ROLE\n}\nglobal.set(\"JOBCTL_HOST\", JOBCTL_HOST)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 380,
        "wires": [
            [
                "b2f8be8bbe3568c3"
            ]
        ]
    },
    {
        "id": "b2f8be8bbe3568c3",
        "type": "debug",
        "z": "6399b4d8775a079a",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "5ba8ddc5b2654cdb",
        "type": "subflow:0cd70b49340abfe2",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "3e849b3e4757f5c7"
            ]
        ]
    },
    {
        "id": "fda60e2d1718673e",
        "type": "subflow:610d7761aec803a7",
        "z": "6399b4d8775a079a",
        "name": "SEND CONNECT",
        "env": [
            {
                "name": "COMMAND",
                "value": "CONNECT",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "86db81d4646a1b23",
        "type": "subflow:610d7761aec803a7",
        "z": "6399b4d8775a079a",
        "name": "SEND PINGREQ",
        "env": [
            {
                "name": "COMMAND",
                "value": "PINGREQ",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 240,
        "wires": []
    },
    {
        "id": "f2e62be0eb17e40b",
        "type": "subflow:610d7761aec803a7",
        "z": "6399b4d8775a079a",
        "name": "SEND CONNACK",
        "env": [
            {
                "name": "COMMAND",
                "value": "CONNACK",
                "type": "str"
            },
            {
                "name": "BROADCAST",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "ed74f720bc1d1a06",
        "type": "subflow:610d7761aec803a7",
        "z": "6399b4d8775a079a",
        "name": "SEND PINGRESP",
        "env": [
            {
                "name": "COMMAND",
                "value": "PINGRESP",
                "type": "str"
            },
            {
                "name": "BROADCAST",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 810,
        "y": 420,
        "wires": []
    },
    {
        "id": "33bb87efab5d968d",
        "type": "debug",
        "z": "6399b4d8775a079a",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 680,
        "wires": []
    },
    {
        "id": "75aa04f7b0569c59",
        "type": "inject",
        "z": "6399b4d8775a079a",
        "name": "未処理topicの配信",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "x": 230,
        "y": 800,
        "wires": [
            [
                "33ff37445fd71e22"
            ]
        ]
    },
    {
        "id": "7b3627b6af144639",
        "type": "subflow:610d7761aec803a7",
        "z": "6399b4d8775a079a",
        "name": "SEND TOPIC",
        "env": [
            {
                "name": "COMMAND",
                "value": "TOPIC",
                "type": "str"
            }
        ],
        "x": 1180,
        "y": 800,
        "wires": []
    },
    {
        "id": "70fa88a3c6d0a19e",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "PROC CONNECT",
        "func": "if (msg.payload.CLUSTER_ROLE !== \"processor\") return msg;\nconst PROCESSOR_HOSTS = global.get(\"PROCESSOR_HOSTS\") || new Map();\nconst fromip = `${msg.payload.CLUSTER_SERVICE_HOST}:${msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\"}`\nPROCESSOR_HOSTS.set(fromip, {\n    HOST: msg.payload.CLUSTER_SERVICE_HOST || msg.payload.CLUSTER_SERVICE_IP,\n    IP: msg.payload.CLUSTER_SERVICE_IP || msg.payload.CLUSTER_SERVICE_HOST,\n    HTTP_PORT: msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\",\n    UDP_PORT: msg.payload.CLUSTER_SERVICE_UDP_PORT || \"2880\",\n\n    NODE_RED_VERSION: msg.payload.NODE_RED_VERSION,\n    ROLE: msg.payload.CLUSTER_ROLE\n})\nglobal.set(\"PROCESSOR_HOSTS\", PROCESSOR_HOSTS)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 340,
        "wires": [
            [
                "f2e62be0eb17e40b"
            ]
        ]
    },
    {
        "id": "ac71904c6ec568e3",
        "type": "http in",
        "z": "6399b4d8775a079a",
        "name": "topic assign",
        "url": "/assign/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "66bb7f7f83faa6c9"
            ]
        ]
    },
    {
        "id": "66bb7f7f83faa6c9",
        "type": "change",
        "z": "6399b4d8775a079a",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "assigned",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 920,
        "wires": [
            [
                "2372af7c30fab0e8"
            ]
        ]
    },
    {
        "id": "b781c8a3c7f1c961",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1140,
        "y": 920,
        "wires": []
    },
    {
        "id": "879ef2c221179d06",
        "type": "subflow:c826488602403262",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 740,
        "y": 920,
        "wires": [
            [
                "fa378d358dbc8c4f"
            ],
            [
                "b3b1347496e2aea7"
            ]
        ]
    },
    {
        "id": "5f8645481b17a6ba",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1140,
        "y": 960,
        "wires": []
    },
    {
        "id": "6107c34b869084b6",
        "type": "subflow:d6f01b04a12d7282",
        "z": "6399b4d8775a079a",
        "name": "",
        "env": [
            {
                "name": "topicPath",
                "value": "topic",
                "type": "str"
            }
        ],
        "x": 560,
        "y": 680,
        "wires": [
            [
                "33bb87efab5d968d"
            ]
        ]
    },
    {
        "id": "041f26bfc1e571d0",
        "type": "subflow:0eb6c089a1f171e9",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 560,
        "y": 800,
        "wires": [
            [
                "3874f7a637f95d3c"
            ]
        ]
    },
    {
        "id": "fa378d358dbc8c4f",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.payload.topic,\n    \"topicTicket\": msg.payload.topicTicket\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 920,
        "wires": [
            [
                "b781c8a3c7f1c961"
            ]
        ]
    },
    {
        "id": "b3b1347496e2aea7",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 960,
        "wires": [
            [
                "5f8645481b17a6ba"
            ]
        ]
    },
    {
        "id": "c806e24325115901",
        "type": "subflow:27227cef106a74f0",
        "z": "6399b4d8775a079a",
        "name": "Add topic",
        "env": [
            {
                "name": "actionType",
                "value": "addtopic",
                "type": "str"
            }
        ],
        "x": 200,
        "y": 680,
        "wires": [
            [
                "6107c34b869084b6"
            ]
        ]
    },
    {
        "id": "33ff37445fd71e22",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 410,
        "y": 800,
        "wires": [
            [
                "041f26bfc1e571d0"
            ],
            []
        ]
    },
    {
        "id": "038dbdaf6002571c",
        "type": "subflow:c826488602403262",
        "z": "6399b4d8775a079a",
        "name": "",
        "env": [
            {
                "name": "topicPath",
                "value": "payload.topic",
                "type": "str"
            }
        ],
        "x": 850,
        "y": 800,
        "wires": [
            [
                "d57fb4f666b653d6"
            ],
            []
        ]
    },
    {
        "id": "d57fb4f666b653d6",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n     \"topic\": msg.payload.topic \n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "7b3627b6af144639"
            ]
        ]
    },
    {
        "id": "2372af7c30fab0e8",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 920,
        "wires": [
            [
                "879ef2c221179d06"
            ]
        ]
    },
    {
        "id": "0875188206215aa8",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "jobctlより1m間隔で配信",
        "info": "",
        "x": 220,
        "y": 760,
        "wires": []
    },
    {
        "id": "84186f06dd80bd09",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "procから新規topicの受信",
        "info": "",
        "x": 230,
        "y": 640,
        "wires": []
    },
    {
        "id": "0b9f36fafe8b569f",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "procにtopicのassign",
        "info": "",
        "x": 210,
        "y": 880,
        "wires": []
    },
    {
        "id": "fe059a4a317c72a1",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "clusterへの参加通知",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "e9bd7603374eed88",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "clusterへのPing",
        "info": "",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "899f97df45f4539f",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "cluster制御処理",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "ba396e40b915898a",
        "type": "http in",
        "z": "6399b4d8775a079a",
        "name": "topic completed",
        "url": "/completed/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "cc1c306c7a0b926e"
            ]
        ]
    },
    {
        "id": "cc1c306c7a0b926e",
        "type": "change",
        "z": "6399b4d8775a079a",
        "name": "set parameter",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "req.params.topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "in-progress",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "8c6807c1605b1cf9"
            ]
        ]
    },
    {
        "id": "faaa745d4c17dcae",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1140,
        "y": 1080,
        "wires": []
    },
    {
        "id": "bb91929872a6fdeb",
        "type": "http response",
        "z": "6399b4d8775a079a",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1140,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c329f731b22b9173",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.payload.topic,\n    \"topicTicket\": msg.payload.topicTicket\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1080,
        "wires": [
            [
                "faaa745d4c17dcae"
            ]
        ]
    },
    {
        "id": "36e36c6b56939fed",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "assing result",
        "func": "msg.payload = {\n    \"HOSTNAME\": env.get(\"HOSTNAME\"),\n    \"NODE_RED_VERSION\": env.get(\"NODE_RED_VERSION\"),\n    \"topic\": msg.topic\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "bb91929872a6fdeb"
            ]
        ]
    },
    {
        "id": "8c6807c1605b1cf9",
        "type": "function",
        "z": "6399b4d8775a079a",
        "name": "JSON.parse",
        "func": "if (msg.topic) {\n    try {\n        msg.topic = JSON.parse(msg.topic)\n    } catch (error) {\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1080,
        "wires": [
            [
                "e8dfbc55efe2889f"
            ]
        ]
    },
    {
        "id": "32f629c82e7afe15",
        "type": "comment",
        "z": "6399b4d8775a079a",
        "name": "procからtopic完了受信",
        "info": "",
        "x": 220,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e8dfbc55efe2889f",
        "type": "subflow:f5ba2b0f4e9255e0",
        "z": "6399b4d8775a079a",
        "name": "",
        "env": [
            {
                "name": "topicPath",
                "value": "topic.topic",
                "type": "str"
            },
            {
                "name": "uuidPath",
                "value": "topic.uuid",
                "type": "str"
            }
        ],
        "x": 730,
        "y": 1080,
        "wires": [
            [
                "c329f731b22b9173"
            ],
            [
                "36e36c6b56939fed"
            ]
        ]
    },
    {
        "id": "3874f7a637f95d3c",
        "type": "subflow:b1626fc28a971f31",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "038dbdaf6002571c"
            ]
        ]
    },
    {
        "id": "3e849b3e4757f5c7",
        "type": "subflow:b3da594ab22fa515",
        "z": "6399b4d8775a079a",
        "name": "",
        "x": 390,
        "y": 440,
        "wires": [
            [
                "8436d950506a6455"
            ],
            []
        ]
    },
    {
        "id": "ba6177f394b19525",
        "type": "inject",
        "z": "4d4915ce082a1010",
        "name": "PINGREQ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 200,
        "y": 240,
        "wires": [
            [
                "09a5e77eb6a303a6"
            ]
        ]
    },
    {
        "id": "c191993956b88fde",
        "type": "switch",
        "z": "4d4915ce082a1010",
        "name": "",
        "property": "payload.COMMAND",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CONNECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CONNACK",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PINGREQ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PINGRESP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TOPIC",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 440,
        "wires": [
            [],
            [
                "b7aa3510c8a309cc"
            ],
            [
                "63e6f51c4506f688"
            ],
            [
                "550f471e1dcb7a01"
            ],
            [
                "c049efd53e4194c2"
            ]
        ]
    },
    {
        "id": "4c5385a7f2e8115c",
        "type": "inject",
        "z": "4d4915ce082a1010",
        "name": "CONNECT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "3d78f19f4836cb18"
            ]
        ]
    },
    {
        "id": "550f471e1dcb7a01",
        "type": "debug",
        "z": "4d4915ce082a1010",
        "name": "PROC PINGRESP",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "b7aa3510c8a309cc",
        "type": "function",
        "z": "4d4915ce082a1010",
        "name": "PROC CONNACK",
        "func": "\nif (msg.payload.CLUSTER_ROLE !== \"jobctl\") return msg;\nconst JOBCTL_HOST = {\n    HOST: msg.payload.CLUSTER_SERVICE_HOST || msg.payload.CLUSTER_SERVICE_IP,\n    IP: msg.payload.CLUSTER_SERVICE_IP || msg.payload.CLUSTER_SERVICE_HOST,\n    HTTP_PORT: msg.payload.CLUSTER_SERVICE_HTTP_PORT || \"1880\",\n    UDP_PORT: msg.payload.CLUSTER_SERVICE_UDP_PORT || \"2880\",\n\n    NODE_RED_VERSION: msg.payload.NODE_RED_VERSION,\n    ROLE: msg.payload.CLUSTER_ROLE\n}\nglobal.set(\"JOBCTL_HOST\", JOBCTL_HOST)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 380,
        "wires": [
            [
                "a4cdb0d6384e6688"
            ]
        ]
    },
    {
        "id": "a4cdb0d6384e6688",
        "type": "debug",
        "z": "4d4915ce082a1010",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 380,
        "wires": []
    },
    {
        "id": "322cdb3a3c6d4aaf",
        "type": "subflow:0cd70b49340abfe2",
        "z": "4d4915ce082a1010",
        "name": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "ba2e5456cc40d96a"
            ]
        ]
    },
    {
        "id": "3d78f19f4836cb18",
        "type": "subflow:610d7761aec803a7",
        "z": "4d4915ce082a1010",
        "name": "SEND CONNECT",
        "env": [
            {
                "name": "COMMAND",
                "value": "CONNECT",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "09a5e77eb6a303a6",
        "type": "subflow:610d7761aec803a7",
        "z": "4d4915ce082a1010",
        "name": "SEND PINGREQ",
        "env": [
            {
                "name": "COMMAND",
                "value": "PINGREQ",
                "type": "str"
            }
        ],
        "x": 410,
        "y": 240,
        "wires": []
    },
    {
        "id": "63e6f51c4506f688",
        "type": "subflow:610d7761aec803a7",
        "z": "4d4915ce082a1010",
        "name": "SEND PINGRESP",
        "env": [
            {
                "name": "COMMAND",
                "value": "PINGRESP",
                "type": "str"
            },
            {
                "name": "BROADCAST",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 810,
        "y": 420,
        "wires": []
    },
    {
        "id": "c049efd53e4194c2",
        "type": "subflow:b8cfb4b94405d94d",
        "z": "4d4915ce082a1010",
        "name": "",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "9106239501d3d8b7"
            ],
            []
        ]
    },
    {
        "id": "a9cd9463431e06fe",
        "type": "debug",
        "z": "4d4915ce082a1010",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 520,
        "wires": []
    },
    {
        "id": "832ca1338123e685",
        "type": "comment",
        "z": "4d4915ce082a1010",
        "name": "clusterへの参加通知",
        "info": "",
        "x": 210,
        "y": 80,
        "wires": []
    },
    {
        "id": "3cd2328fbed73e5f",
        "type": "comment",
        "z": "4d4915ce082a1010",
        "name": "clusterへのPing",
        "info": "",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "09d7c8541ed4506b",
        "type": "comment",
        "z": "4d4915ce082a1010",
        "name": "cluster制御処理",
        "info": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "9106239501d3d8b7",
        "type": "subflow:1f63a3ba2a6337e6",
        "z": "4d4915ce082a1010",
        "name": "",
        "x": 970,
        "y": 520,
        "wires": [
            [
                "a9cd9463431e06fe"
            ]
        ]
    },
    {
        "id": "ba2e5456cc40d96a",
        "type": "subflow:b3da594ab22fa515",
        "z": "4d4915ce082a1010",
        "name": "",
        "x": 390,
        "y": 440,
        "wires": [
            [],
            [
                "c191993956b88fde"
            ]
        ]
    },
    {
        "id": "e4e20228d978a35d",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "get topic",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "30",
        "topic": "",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "30529b79c02a394f"
            ]
        ]
    },
    {
        "id": "0385629247bbb46e",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 320,
        "wires": []
    },
    {
        "id": "88fda1c4f25cba11",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 360,
        "wires": []
    },
    {
        "id": "dd5d0984cf0af806",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 400,
        "wires": []
    },
    {
        "id": "4e90783a35fceb8f",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "Sample Topic1",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic1\",\t    \"param\": {\"hoge\":\"new\"}\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "e61870e6384df480"
            ]
        ]
    },
    {
        "id": "e61870e6384df480",
        "type": "subflow:375ee1d6cf6e3891",
        "z": "f01882c08732b397",
        "name": "",
        "env": [
            {
                "name": "actionType",
                "value": "addtopic",
                "type": "str"
            },
            {
                "name": "topicPath",
                "value": "payload.topic",
                "type": "str"
            }
        ],
        "x": 760,
        "y": 160,
        "wires": [
            [
                "938bc7c1342ffed9"
            ],
            []
        ]
    },
    {
        "id": "938bc7c1342ffed9",
        "type": "debug",
        "z": "f01882c08732b397",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 160,
        "wires": []
    },
    {
        "id": "1337ddaae1e0b4f2",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "新規topicの登録",
        "info": "",
        "x": 120,
        "y": 100,
        "wires": []
    },
    {
        "id": "6f67feb8aaf36c3d",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "topicを取得して着手",
        "info": "",
        "x": 130,
        "y": 320,
        "wires": []
    },
    {
        "id": "d531f9b3819a76e3",
        "type": "comment",
        "z": "f01882c08732b397",
        "name": "topicを完了",
        "info": "",
        "x": 710,
        "y": 320,
        "wires": []
    },
    {
        "id": "878a855ba718978e",
        "type": "delay",
        "z": "f01882c08732b397",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 380,
        "wires": [
            [
                "ebc7c08433e303bb"
            ]
        ]
    },
    {
        "id": "771e91fbd62fd669",
        "type": "function",
        "z": "f01882c08732b397",
        "name": "set-jobsession",
        "func": "\nconst date = new Date()\nconst jobsession = date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + (date.getDate() + 1)).slice(-2)\n\nmsg.payload.topic.param.jobsession = jobsession\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "980fc44b5f89e93e"
            ]
        ]
    },
    {
        "id": "486842778ef1fa28",
        "type": "inject",
        "z": "f01882c08732b397",
        "name": "git Topic",
        "props": [
            {
                "p": "payload.topicName",
                "v": "git",
                "vt": "str"
            },
            {
                "p": "payload.list",
                "v": "[\"A0000_0000\",\"B0000_0000\"]",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "094e0dc9b2a447d1"
            ]
        ]
    },
    {
        "id": "094e0dc9b2a447d1",
        "type": "subflow:b1626fc28a971f31",
        "z": "f01882c08732b397",
        "name": "",
        "env": [
            {
                "name": "outputPath",
                "value": "payload.topic.param.target",
                "type": "str"
            }
        ],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "771e91fbd62fd669"
            ]
        ]
    },
    {
        "id": "980fc44b5f89e93e",
        "type": "function",
        "z": "f01882c08732b397",
        "name": "set-topic",
        "func": "const topic = msg.payload.topicName\nmsg.payload.topic.topic = topic\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "e61870e6384df480"
            ]
        ]
    },
    {
        "id": "30529b79c02a394f",
        "type": "subflow:131075747e8871f8",
        "z": "f01882c08732b397",
        "name": "",
        "x": 340,
        "y": 380,
        "wires": [
            [
                "0385629247bbb46e",
                "878a855ba718978e"
            ],
            []
        ]
    },
    {
        "id": "ebc7c08433e303bb",
        "type": "subflow:1ec11fe81fee736c",
        "z": "f01882c08732b397",
        "name": "",
        "x": 700,
        "y": 380,
        "wires": [
            [
                "88fda1c4f25cba11"
            ],
            [
                "dd5d0984cf0af806"
            ]
        ]
    },
    {
        "id": "91e95533dea37675",
        "type": "subflow:4d4915ce082a1010",
        "z": "f01882c08732b397",
        "name": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "f95507e7d1cc63f1",
        "type": "inject",
        "z": "dbd8abb392121dc1",
        "name": "Sample Topic1",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic1\",\t    \"param\": {\"hoge\":\"new\"}\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "ef4c138a0cd71fa3"
            ]
        ]
    },
    {
        "id": "c803403e1bccf5d2",
        "type": "debug",
        "z": "dbd8abb392121dc1",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 400,
        "wires": []
    },
    {
        "id": "84d6fcc45f5b83e4",
        "type": "inject",
        "z": "dbd8abb392121dc1",
        "name": "Sample Topic2",
        "props": [
            {
                "p": "payload.topic",
                "v": "{\t    \"topic\" : \"topic2\",\t    \"param\": {\"hoge\":\"new\"}\t}\t",
                "vt": "jsonata"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "ef4c138a0cd71fa3"
            ]
        ]
    },
    {
        "id": "ef4c138a0cd71fa3",
        "type": "subflow:d6f01b04a12d7282",
        "z": "dbd8abb392121dc1",
        "name": "",
        "x": 380,
        "y": 400,
        "wires": [
            [
                "c803403e1bccf5d2"
            ]
        ]
    },
    {
        "id": "b258f9f392268ee6",
        "type": "comment",
        "z": "dbd8abb392121dc1",
        "name": "新規topicの登録",
        "info": "",
        "x": 140,
        "y": 320,
        "wires": []
    },
    {
        "id": "9678cde7abaf3dd8",
        "type": "inject",
        "z": "dbd8abb392121dc1",
        "name": "PINGREQ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "d364cfac46dd5e4e"
            ]
        ]
    },
    {
        "id": "9e7ff7747022d92a",
        "type": "inject",
        "z": "dbd8abb392121dc1",
        "name": "CONNECT",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "c3a00fa09ca986c5"
            ]
        ]
    },
    {
        "id": "c3a00fa09ca986c5",
        "type": "subflow:610d7761aec803a7",
        "z": "dbd8abb392121dc1",
        "name": "SEND CONNECT",
        "env": [
            {
                "name": "COMMAND",
                "value": "CONNECT",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 120,
        "wires": []
    },
    {
        "id": "d364cfac46dd5e4e",
        "type": "subflow:610d7761aec803a7",
        "z": "dbd8abb392121dc1",
        "name": "SEND PINGREQ",
        "env": [
            {
                "name": "COMMAND",
                "value": "PINGREQ",
                "type": "str"
            }
        ],
        "x": 350,
        "y": 240,
        "wires": []
    },
    {
        "id": "dcb1d2a41ad64807",
        "type": "comment",
        "z": "dbd8abb392121dc1",
        "name": "clusterへの参加通知",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "9e16b278e2140666",
        "type": "comment",
        "z": "dbd8abb392121dc1",
        "name": "clusterへのPing",
        "info": "",
        "x": 140,
        "y": 200,
        "wires": []
    },
    {
        "id": "50ea0c396598ecc5",
        "type": "subflow:6399b4d8775a079a",
        "z": "dbd8abb392121dc1",
        "name": "",
        "x": 110,
        "y": 40,
        "wires": []
    }
]